local monarch = require "monarch.monarch"
local url = require "utils.url"
local gooey = require "gooey.gooey"
local gooey_buttons = require "utils.gooey_buttons"
local button = require "utils.button"
local netcore = require "pokedex.network.netcore"
local broadcast = require "utils.broadcast"
local member_list = require "screens.network.member_list"
local netcore = require "pokedex.network.netcore"
local net_ip = require "pokedex.network.net_ip"
local net_members = require "pokedex.network.net_members"
local screens = require "utils.screens"
local messages = require "utils.messages"

local function redraw_ip(self)
	local enabled = netcore.get_current_state() == netcore.STATE_SERVING

	local node_ip = gui.get_node("txt_ip")
	local node_port = gui.get_node("txt_port")

	if enabled then
		local port = netcore.get_current_server_port()
		gui.set_text(node_port, tostring(port))

		local ip = "<unknown>"

		local global_ip = net_ip.get_global_ip()
		if global_ip then
			ip = tostring(global_ip)
		else
			local local_ip = net_ip.get_local_ip()
			if local_ip then
				ip = tostring(local_ip) .. "    (local)"
			end
		end
		gui.set_text(node_ip, ip)
	end

	gui.set_enabled(node_port, enabled)	
	gui.set_enabled(node_ip, enabled)	
	gui.set_enabled(gui.get_node("txt_port_title"), enabled)
	gui.set_enabled(gui.get_node("txt_ip_title"), enabled)
	gui.set_enabled(gui.get_node("btn_info"), enabled)
end

local function redraw_member_list()
	local enabled = net_members.has_any_members()

	gui.set_enabled(gui.get_node("txt_group_members"), enabled)
	gui.set_enabled(gui.get_node("list_group_members/root"), enabled)
end

local function redraw_status(self)
	local enabled = true
	local text = ""

	local cur_status = netcore.get_current_state()
	if cur_status == netcore.STATE_SERVING then
		text = "HOSTING"				
	elseif cur_status == netcore.STATE_CONNECTING then
		text = "JOINING"
	elseif cur_status == netcore.STATE_CONNECTED then
		text = "JOINED"
	else
		enabled = false
	end

	local node_status = gui.get_node("txt_status")
	gui.set_text(node_status, text)
	gui.set_enabled(node_status, enabled)

	redraw_ip(self)
end

local function redraw_connect_nearby_button()
	local enabled = false

	if netcore.get_current_state() == netcore.STATE_IDLE then
		local info = netcore.get_nearby_server_info()
		if info then
			local name = tostring(info.name or info.ip)
			gui.set_text(gui.get_node("txt_join_nearby"), "JOIN NEARBY HOST:\n" .. name)
			enabled = true
		end		
	end

	gui.set_enabled(gui.get_node("btn_join_nearby"), enabled)
end

local function redraw_buttons()
	local host_enable = false
	local join_enable = false
	local disconnect_enable = false

	local state = netcore.get_current_state()
	if state == netcore.STATE_IDLE then
		host_enable = true
		join_enable = true
	elseif state == netcore.STATE_SERVING or state == netcore.STATE_CONNECTING or state == netcore.STATE_CONNECTED then
		disconnect_enable = true
	end

	gui.set_enabled(gui.get_node("btn_host"), host_enable)
	gui.set_enabled(gui.get_node("btn_join"), join_enable)
	gui.set_enabled(gui.get_node("btn_disconnect"), disconnect_enable)

	redraw_connect_nearby_button()
end

local function redraw(self)
	redraw_status(self)
	redraw_ip(self)
	redraw_buttons()
	redraw_member_list()
end

function init(self)
	msg.post(url.MENU, messages.SHOW)
	button.acquire()

	if netcore.get_current_state() == netcore.STATE_IDLE then
		netcore.find_nearby_server()
	end

	self.list_group_members = member_list.create("list_group_members", {show_self=true})

	if netcore.get_current_state() == netcore.STATE_SERVING then
		net_ip.refresh_local_ip()
		net_ip.refresh_global_ip()
	end

	redraw(self)
	
	broadcast.register(netcore.MSG_NEARBY_SERVER_FOUND)
	broadcast.register(netcore.MSG_STATE_CHANGED)
	broadcast.register(net_members.MSG_MEMBERS_CHANGED)
	broadcast.register(net_ip.MSG_IPS_UPDATED)
end

function final(self)
	broadcast.unregister(netcore.MSG_NEARBY_SERVER_FOUND)
	broadcast.unregister(netcore.MSG_STATE_CHANGED)
	broadcast.unregister(net_members.MSG_MEMBERS_CHANGED)
	broadcast.unregister(net_ip.MSG_IPS_UPDATED)
end

function on_message(self, message_id, message)
	if message_id == netcore.MSG_NEARBY_SERVER_FOUND then
		redraw_connect_nearby_button()
	elseif message_id == netcore.MSG_STATE_CHANGED then
		redraw(self)
		netcore.find_nearby_server()
	elseif message_id == net_members.MSG_MEMBERS_CHANGED then
		redraw_member_list()
	elseif message__ip == net_ip.MSG_IPS_UPDATED then
		redraw_ip(self)
	end
	
	self.list_group_members.on_message(message_id, message)
end

function on_input(self, action_id, action)
	gooey.button("btn_host", action_id, action, function()
		monarch.show(screens.NETWORK_START_HOSTING)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("btn_host")) end)

	gooey.button("btn_join", action_id, action, function()
		monarch.show(screens.NETWORK_JOIN_HOST)
	end, function(b) gooey_buttons.common_button(b, gui.get_node("btn_join")) end)

	gooey.button("btn_join_nearby", action_id, action, function()
		netcore.connect_to_nearby_server()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("btn_join_nearby")) end)

	gooey.button("btn_disconnect", action_id, action, function()
		netcore.disconnect()
		netcore.find_nearby_server()
	end, function(b) gooey_buttons.common_button(b, gui.get_node("btn_disconnect")) end)	

	gooey.button("btn_info", action_id, action, function()
		monarch.show("info", nil,
		{
			text="You will need to provide the IP and Port to anyone wishing to join your group.\n\nThey can input these values on the \"JOIN\" screen.",
		})
	end, function(b) gooey_buttons.common_button(b, gui.get_node("btn_info")) end)	
	
	self.list_group_members.on_input(action_id, action)
end
