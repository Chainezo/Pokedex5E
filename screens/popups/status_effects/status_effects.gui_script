local monarch = require "monarch.monarch"
local gro = require "utils.gui_render_order"
local _pokemon = require "pokedex.pokemon"
local gooey_buttons = require "utils.gooey_buttons"
local gooey = require "gooey.gooey"
local url = require "utils.url"
local gui_utils = require "utils.gui"
local status_effects = require "screens.party.components.status_effects"
local storage = require "pokedex.storage"
local tracking_id = require "utils.tracking_id"
local statuses = require "pokedex.statuses"

local pokemon_id
local _action = vmath.vector3()

function init(self)
	gui.set_render_order(gro.POPUP)
	msg.post(url.MENU, "hide")
	self.lock = true
	timer.delay(0.1, false, function() self.lock = false end)
	data = monarch.data("status_effects")
	pokemon_id = data.pokemon_id
	
	local status = storage.get_status_effects(pokemon_id)
	gui.play_flipbook(gui.get_node("poisoned"), status[statuses.status.POISONED] and statuses.status_images[statuses.status.POISONED] .. "_down" or statuses.status_images[statuses.status.POISONED] .. "_up")
	gui.play_flipbook(gui.get_node("frozen"), status[statuses.status.FROZEN] and statuses.status_images[statuses.status.FROZEN] .. "_down" or statuses.status_images[statuses.status.FROZEN] .. "_up")
	gui.play_flipbook(gui.get_node("paralyzed"), status[statuses.status.PARALYZED] and statuses.status_images[statuses.status.PARALYZED] .. "_down" or statuses.status_images[statuses.status.PARALYZED] .. "_up")
	gui.play_flipbook(gui.get_node("burning"), status[statuses.status.BURNING] and statuses.status_images[statuses.status.BURNING] .. "_down" or statuses.status_images[statuses.status.BURNING] .. "_up")
	gui.play_flipbook(gui.get_node("asleep"), status[statuses.status.ASLEEP] and statuses.status_images[statuses.status.ASLEEP] .. "_down" or statuses.status_images[statuses.status.ASLEEP] .. "_up")
	gui.play_flipbook(gui.get_node("confused"), status[statuses.status.CONFUSED] and statuses.status_images[statuses.status.CONFUSED] .. "_down" or statuses.status_images[statuses.status.CONFUSED] .. "_up")
	
	gooey.checkbox("poisoned").set_checked(status[statuses.status.POISONED] or false)
	gooey.checkbox("frozen").set_checked(status[statuses.status.FROZEN] or false)
	gooey.checkbox("paralyzed").set_checked(status[statuses.status.PARALYZED] or false)
	gooey.checkbox("burning").set_checked(status[statuses.status.BURNING] or false)
	gooey.checkbox("asleep").set_checked(status[statuses.status.ASLEEP] or false)
	gooey.checkbox("confused").set_checked(status[statuses.status.CONFUSED] or false)
	self.scroll_area = gui.get_node("scrolling_area")
	self.scroll_node = gui.get_node("scrolling_root")
	self.scroll_position = vmath.vector3()
	local sx, sy = gui_utils.get_window_scale()
	self.clamp_position = vmath.vector3(0, sy*955, 0)
end

local function close()
	gameanalytics.addDesignEvent {
		eventId = "Navigation:Back",
		value = tracking_id[monarch.top()]
	}
	msg.post(url.MENU, "show")
	monarch.back()
end

local function reset()
	gameanalytics.addDesignEvent {
		eventId = "Party:Status:Reset"
	}
end

local function on_checked(checkbox, status)
	storage.set_status_effect(pokemon_id, status, checkbox.checked)
	if checkbox.checked then
		gameanalytics.addDesignEvent {
			eventId = "Party:Status:Add",
			value = status
		}
	else
		gameanalytics.addDesignEvent {
			eventId = "Party:Status:Remove",
			value = status
		}
	end
	msg.post(url.PARTY, "refresh_status")
end

local function update_checkbox(checkbox, _status)
	gui.play_flipbook(checkbox.node, checkbox.checked and statuses.status_images[_status] .. "_down" or statuses.status_images[_status] .. "_up")
end

function on_input(self, action_id, action)
	if self.lock then
		return
	end
	gooey.checkbox("poisoned", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.POISONED) end, function(c) update_checkbox(c, statuses.status.POISONED) end)
	gooey.checkbox("frozen", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.FROZEN) end, function(c) update_checkbox(c, statuses.status.FROZEN) end)
	gooey.checkbox("paralyzed", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.PARALYZED) end, function(c) update_checkbox(c, statuses.status.PARALYZED) end)
	gooey.checkbox("burning", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.BURNING) end, function(c) update_checkbox(c, statuses.status.BURNING) end)
	gooey.checkbox("asleep", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.ASLEEP) end, function(c) update_checkbox(c, statuses.status.ASLEEP) end)
	gooey.checkbox("confused", action_id, action, function(checkbox) on_checked(checkbox, statuses.status.CONFUSED) end, function(c) update_checkbox(c, statuses.status.CONFUSED) end)

	if action.pressed then
		_action.x = action.x
		_action.y = action.y
	end
	if action_id == hash("touch") and gui.pick_node(self.scroll_area, action.x, action.y) then
		self.scroll_position.y = math.max(self.scroll_position.y - (_action.y-action.y)*0.5, self.clamp_position.x)
		self.scroll_position.y = math.min(self.scroll_position.y, self.clamp_position.y)
		gui.set_position(self.scroll_node, self.scroll_position)
	end
	_action.x = action.x
	_action.y = action.y
	
	local reset = gooey.button("btn_reset", action_id, action, function()
		local status = storage.get_status_effects(pokemon_id)
		for s, _ in pairs(status) do
			storage.set_status_effect(pokemon_id, s, false)
		end
		gooey.checkbox("poisoned").set_checked(false)
		gooey.checkbox("frozen").set_checked(false)
		gooey.checkbox("paralyzed").set_checked(false)
		gooey.checkbox("burning").set_checked(false)
		gooey.checkbox("asleep").set_checked(false)
		gooey.checkbox("confused").set_checked(false)
		update_checkbox(gooey.checkbox("poisoned"), statuses.status.POISONED)
		update_checkbox(gooey.checkbox("frozen"), statuses.status.FROZEN)
		update_checkbox(gooey.checkbox("paralyzed"), statuses.status.PARALYZED)
		update_checkbox(gooey.checkbox("burning"), statuses.status.BURNING)
		update_checkbox(gooey.checkbox("asleep"), statuses.status.ASLEEP)
		update_checkbox(gooey.checkbox("confused"), statuses.status.CONFUSED)

		msg.post(url.PARTY, "refresh_status")
	end)
	gooey.button("btn_close", action_id, action, close)
end
